#!/bin/sh

if [ $# -lt 1 ]; then
	echo "Not enough arguments"
	exit 1
else
	if [ -z "$DISTRO" ]; then
		exp_distro(){ export DISTRO="$(grep -w $1 /etc/os-release | cut -d '=' -f 2)"; }
		if grep -wq 'ID_LIKE' /etc/os-release; then
			exp_distro 'ID_LIKE'
		else
			exp_distro 'ID'
		fi
	fi

	if [ -z "$PERM" ]; then
		if [ -n "$(command -v sudo)" ]; then
			PERM='sudo'
		elif [ -n "$(command -v doas)" ]; then
			PERM='doas'
		else
			echo "Sudo | doas dosen't exist"
			exit 1
		fi
	fi

	case "$DISTRO" in
		[Aa]rch ) pmn='pacman' ;pm="$PERM pacman" ;;
		[Dd]ebian | [Uu]buntu ) pmn='atp' ;pm="$PERM apt" ;;
		[Gg]entoo ) pmnt='emerge'; pm="$PERM emerge -avq" ;;
	esac

	aur='paru'; fl='flatpak'; viewer='fzf';


	is_flatpak="$(command -v $fl)"
	is_paru="$(command -v $aur)"
	is_rate_mirrors="$(command -v rate-mirrors)"

	aur(){
		if [ -n "$(command -v pacman)" ]; then
			if [ -z "$is_paru" ]; then
				read -p "Would you like to install paru [y/N] " ans
				case "$ans" in
					[yY]* )
							src="$HOME"/.local/src
							i_loc="$src"/paru
							[ ! -d $src ] && mkdir -p $src
							install --needed base-devel git
							[ ! -d "$i_loc" ] && git clone https://aur.archlinux.org/paru.git  $i_loc
							cd $i_loc
							makepkg -si
							;;
					*) exit 1 ;;
				esac
			fi
			if [ -n "$is_paru" ]; then
				case "$1" in
					i ) shift; $aur -S $@ ;;
					u ) $aur -Syyu ;;
					s ) shift; $aur -Ss $1 ;;
					e ) $PERM $EDITOR "$HOME"/.config/paru/paru.conf ;;
				esac
			fi
		fi
	}

	flatpak_copy(){ $viewer < $1 | tr '\t' '|' | cut -d '|' -f $2 | tr -d '\n' | xclip -sel c; }
	flatpak_stuff(){
		if [ -z "$is_flatpak" ]; then
			echo "Flatpak not installed"
			read -p "Would you like to install it? [y/N] " ans
			case $ans in
				[Yy]* )
					install $fl \
						&& $fl remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
					;;
				* ) exit 1 ;;
			esac
		fi
		if [ -n "$is_flatpak" ]; then
			case "$1" in
				i ) shift; $fl install $@ ;;
				r ) shift; $fl uninstall $@ ;;
				u ) $fl update ;;
				s )
					shift
					tempfsf=$(mktemp)
					$fl search $1 > $tempfsf
					flatpak_copy $tempfsf 3
					rm $tempfsf
					;;
				l )
					tempflf=$(mktemp)
					$fl list --app >  $tempflf
					flatpak_copy $tempflf 2
					rm $tempflf
					;;
				c ) $fl list --app | wc -l ;;
				ar ) shift; $fl remote-add --if-not-exists $@ ;;
				dr ) shift; $fl remote-delete $1 ;;
				rmz ) $fl uninstall --unused ;;
			esac
		fi
	}

	install(){
		case "$@" in
			*.* ) flatpak_stuff i $@ ;;
			* )
				case "$pmn" in
					'pacman' ) $pm -S $@ || aur i $@ ;;
					'emerge' ) $pm $@ ;;
					'apt' ) $pm install $@ ;;
				esac
				;;
			esac
	}

	update(){
		case "$pmn" in
			'pacman' ) $pm -Syyu && aur u;;
			'emerge' ) $pm --sync && $pm --update --deep --with-bdeps=y @world && $pm --depclean ;;
			'apt' ) $pm update && $pm upgrade ;;
		esac
		[ -n "$is_flatpak" ] && flatpak_stuff u
	}

	uninstall(){
		case "$@" in
			*.* ) flatpak_stuff r $@ ;;
			* )
				case "$pmn" in
					'pacman' ) $pm -Rns $@ ;;
					'emerge' ) $pm -c $@ ;;
					'apt' ) $pm remove $@ ;;
				esac
				;;
		esac
	}

	list(){
		case "$pmn" in
			'pacman' ) $pmn -Q ;;
			'emerge' ) equery list "*" ;;
			'apt' ) dpkg -L ufw ;;
		esac
	}

	count(){
		case "$pmn" in
			'pacman' ) $pm -Q | wc -l ;;
			'emerge' ) equery list "*" | wc -l ;;
			'apt' ) dpkg -L ufw | wc -l ;;
		esac
	}

	search(){
		case "$pmn" in
			'pacman' ) $pmn -Ss $1 || aur s $1 ;;
			'emerge' ) $pm --search $1 ;;
			'apt' ) $pm search $1 ;;
		esac
	}

	rank_servers(){
		if [ -n "$is_rate_mirrors" ]; then
			if [ -z "$is_rate_mirrors" ]; then
				read -p "Would you like install rate-mirrors [y/N]? " ans
				case "$ans" in
					[yY]* ) aur i rate-mirrors-bin ;;
					* ) exit 1 ;;
				esac
			fi
			if [ -n "$is_rate_mirrors" ]; then
				export TMPFILE="$(mktemp)"; \
				sudo true; \
    			rate-mirrors --save=$TMPFILE arch --max-delay=21600 \
    			  && sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-backup \
    			  && sudo mv $TMPFILE /etc/pacman.d/mirrorlist
			fi
		fi
	}

	gentoo_stuff(){
		[ -z $(command -v emerge) ] && exit 1
		case "$1" in
			nu ) $pm --update --deep --newuse @world ;;
			cu ) e --changed-use --deep @world ;;
			ct )
				shift
				$PERM qlop -tHv $1
				;;
			ar )
				shift
				$PERM eselect repository enable $1
				$PERM emaint sync -r $1
				$pm --sync
				;;
			dr )
				shift
				$PERM eselect repository remove $1
				;;
			um )
				shift
				$pm $1 --automask
				$PERM etc-update
				$pm $1
				;;
		esac
	}

	remove_zombies(){
		case "$pmn" in
			'pacman' ) $pm -Rns $($pm -Qtdq) ;;
			'emerge' ) gentoo_stuff nu && $pm --depclean ;;
			'apt' ) $pm autoremove ;;
		esac
	}

	edit_conf(){
		case "$pmn" in
			'pacman' ) $PERM $EDITOR /etc/pacman.conf ;;
			'emerge' ) $PERM $EDITOR /etc/portage/make.conf ;;
			'apt' ) $PERM $EDITOR /etc/apt/sources.list ;;
		esac
	}

	auto_install_uninstall(){
		for p in $@; do
			if list | grep -q "$p"; then
				to_uninstall="$to_uninstall $p"
			else
				to_install="$to_install $p"
			fi
		done
		[ -n "$to_install" ] && install $to_install
		[ -n "$to_uninstall" ] && uninstall $to_uninstall
	}

	if [ -z "$(command -v $viewer)" ]; then
		read -p "Would you like to install $viewer [Y/n]? " ans
		case "$ans" in
			[Nn]* ) exit 1 ;;
			* ) install $viewer ;;
		esac
	fi


	case "$1" in
		i | install ) shift; install $@ ;;
		r | rm ) shift; uninstall $@ ;;
		u | update ) update ;;
		l | list ) list | $viewer | cut -d ' ' -f 1 | tr -d '\n' | xclip -sel c ;;
		c | count ) count ;;
		rmz ) remove_zombies ;;
		e | edit ) edit_conf ;;
		s | search ) shift; search $1 ;;
		# arch stuff
		rs ) rank_servers ;;
		ai ) shift; aur i $@ ;;
		ae ) aur e ;;
		# gentoo stuff
		nu ) gentoo_stuff nu ;;
		cu ) gentoo_stuff cu ;;
		ct ) shift; gentoo_stuff $1 ;;
		ar ) shift; gentoo_stuff $1 ;;
		dr ) shift; gentoo_stuff $1 ;;
		um ) shfit; gentoo_stuff $1 ;;
		# flatpak
		fi ) shift; flatpak_stuff i $@ ;;
		fr ) shift; flatpak_stuff r $@ ;;
		far ) shift; flatpak_stuff ar $@ ;;
		fdr ) shift; flatpak_stuff dr $@ ;;
		fl ) flatpak_stuff l ;;
		fc ) flatpak_stuff c ;;
		fs ) shift; flatpak_stuff s $@ ;;
		frmz ) shift; flatpak_stuff rmz ;;
		* ) auto_install_uninstall $@ ;;
	esac
fi
